#!/usr/bin/env bash

check_for_wip_commit() {
	while read local_ref local_sha remote_ref remote_sha
	do
		if [ "$local_sha" = $z40 ]
		then
			# Handle delete
			:
		else
			if [ "$remote_sha" = $z40 ]
			then
				# New branch, examine all commits
				range="$local_sha"
			else
				# Update to existing branch, examine new commits
				range="$remote_sha..$local_sha"
			fi

			# Check for WIP commit
			local commit=`git rev-list -n 1 --grep 'WIP' "$range"`
			if [ -n "$commit" ]
			then
				echo >&2 "$(tput setaf 1)Found WIP commit in $local_ref, not pushing$(tput sgr 0)"
				exit 1
			fi
		fi
	done
	echo "Checking for WIP Commits $(tput setaf 2)✔$(tput sgr 0)"
}

check_for_unTracked_files() {
    local unTrackedFiles=$(git ls-files --others --exclude-standard)

    if [ -n "$unTrackedFiles" ]
	then
		echo >&2 "$(tput setaf 1)Found Untracked files(s):$(tput sgr 0)"
		echo >&2 "$(tput setaf 3)$unTrackedFiles$(tput sgr 0)"
		echo >&2 "Commit or Stash file(s) before pushing to $remote"
		exit 1
	fi
	echo "Checking for un tracked files $(tput setaf 2)✔$(tput sgr 0)"
}

pull() {
	git pull --rebase

	if [ $? -ne 0 ]
	then
	  echo "$(tput setaf 1)Rebase failure, Cannot push to $remote$(tput sgr 0)" >&2
	  exit 1
	fi
	echo "Applying latest changes from $remote $(tput setaf 2)✔$(tput sgr 0)"
}

run_tests() {
	./gradlew clean build

	if [ $? -ne 0 ]
	then
		echo "$(tput setaf 1)Tests failed, Cannot push to $remote$(tput sgr 0)" >&2
	  exit 1
	fi
	echo "Running tests $(tput setaf 2)✔$(tput sgr 0)"
}

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

check_for_wip_commit \
&& check_for_unTracked_files \
&& pull \
&& run_tests \
